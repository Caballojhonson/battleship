(()=>{var t={71:t=>{function r(t,r,n,e){const i=function(t){return"carrier"===t?5:"battleship"===t?4:"cruiser"===t?3:"destroyer"===t?2:"submarine"===t?1:void 0}(t);return{type:t,axis:e,length:i,coords:function(){let t=[];if("x"===e)if(r+i>10)for(let r=10;r>10-i;r--)t.push([r,n]);else for(let e=r;e<r+i;e++)t.push([e,n]);if("y"===e)if(n+i>10)for(let n=10;n>10-i;n--)t.push([r,n]);else for(let e=n;e<n+i;e++)t.push([r,e]);return t}(),hitAt:[],sunk:!1,hit(t){this.hitAt.includes(t)||this.hitAt.push(t),this.isSunk()},isSunk(){this.hitAt.length===this.length&&(this.sunk=!0)}}}function n(){function t(t,r,n){return{id:t,x:r,y:n,hit:!1,hasShip:!1,missed:!1}}return{grid:function(){let r=[];for(let n=0;n<10;n++)for(let e=0;e<10;e++){let i=r.length+1;r.push(new t(i,e+1,n+1))}return r}(),ships:[],placeShip:function(t,n,e,i){const o=new r(t,n,e,i);this.ships.push(o),o.coords.forEach((t=>{for(let r=0;r<this.grid.length;r++){const n=this.grid[r];n.hasShip||t[0]===n.x&&t[1]===n.y&&(n.hasShip=!0)}}))},randomize:function(){const t=this;function n(e){const i=new r(e,Math.round(9*Math.random())+1,Math.round(9*Math.random())+1,Math.random()>.5?"x":"y");if(function(r){let n=[];return r.coords.forEach((r=>{t.grid.filter((t=>t.hasShip)).forEach((t=>{r[0]===t.x&&r[1]===t.y&&n.push(!1)}))})),n.every((t=>t))}(i))return i;n(e)}["carrier","battleship","cruiser","destroyer","destroyer","submarine","submarine"].forEach((r=>{const e=n(r);t.ships.push(e)}))},recieveAttack:function(t,r){let n=!1;this.ships.forEach((e=>{for(let i=0;i<e.coords.length;i++){const o=e.coords[i];if(o[0]===t&&o[1]===r)return void e.hit(i);n=!0}})),this.grid.forEach((e=>{e.x===t&&e.y===r&&(e.hit=!0,n&&(e.missed=!0))}))},gameoverEval:function(){let t=[];return this.ships.forEach((r=>{t.push(r.sunk)})),t.every((t=>t))}}}const e=(()=>{const t=new n,r=new n;return t.randomize(),r.randomize(),console.log(t),console.log(r),{playerBoard:t,AIBoard:r}})();t.exports={Ship:r,Gameboard:n,Player:function(t){return{name:t,isTurn:!1,isAI:!1,play:function t(r){let n=Math.round(9*Math.random())+1,e=Math.round(9*Math.random())+1;r.grid.forEach((i=>{if(i.x===n&&i.y===e){if(i.hit)return void t(r);r.recieveAttack(n,e)}}))}}},run:e}}},r={};function n(e){var i=r[e];if(void 0!==i)return i.exports;var o=r[e]={exports:{}};return t[e](o,o.exports,n),o.exports}(()=>{const{run:t}=n(71)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,