(()=>{var t={902:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(15),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,"#main-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n}\n.board {\n    display: grid;\n    grid-template-columns: repeat(10, auto);\n    grid-template-rows: repeat(10, auto);\n    height: 40vh;\n    width: 40vh;\n    margin: 5vh;\n    border: 0.5px solid black;\n}\n.cell {\n    border: 0.5px solid black;\n}\n.has-ship {\n    background-color: grey;\n}\n.missed {\n    background-color: yellow;\n}\n","",{version:3,sources:["webpack://./style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;AACjB;AACA;IACI,aAAa;IACb,uCAAuC;IACvC,oCAAoC;IACpC,YAAY;IACZ,WAAW;IACX,WAAW;IACX,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,sBAAsB;AAC1B;AACA;IACI,wBAAwB;AAC5B",sourcesContent:["#main-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n}\n.board {\n    display: grid;\n    grid-template-columns: repeat(10, auto);\n    grid-template-rows: repeat(10, auto);\n    height: 40vh;\n    width: 40vh;\n    margin: 5vh;\n    border: 0.5px solid black;\n}\n.cell {\n    border: 0.5px solid black;\n}\n.has-ship {\n    background-color: grey;\n}\n.missed {\n    background-color: yellow;\n}\n"],sourceRoot:""}]);const s=a},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,o=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(t);!(a=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(t){s=!0,o=t}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if(!a)return i;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),u="/*# ".concat(c," */"),l=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[i].concat(l).concat([u]).join("\n")}return[i].join("\n")}},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},a=[],s=0;s<t.length;s++){var c=t[s],u=r.base?c[0]+r.base:c[0],l=i[u]||0,d="".concat(u," ").concat(l);i[u]=l+1;var h=n(d),f={css:c[1],media:c[2],sourceMap:c[3]};-1!==h?(e[h].references++,e[h].updater(f)):e.push({identifier:d,updater:o(f,r),references:1}),a.push(d)}return a}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=n(i[a]);e[s].references--}for(var c=r(t,o),u=0;u<i.length;u++){var l=n(i[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=c}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},389:t=>{const e=[document.getElementById("player-board"),document.getElementById("AI-board")];t.exports={renderBoards:function(t,n){const r=[t,n];r.forEach(((t,n)=>{t.grid.forEach((t=>{const r=document.createElement("div");r.setAttribute("data-x",t.x),r.setAttribute("data-y",t.y),r.classList.add("cell"),e[n].appendChild(r)}))})),function(t){t.forEach(((t,n)=>{t.grid.forEach(((t,r)=>{t.hasShip&&e[n].children[r].classList.add("has-ship")}))}))}(r)}}},720:(t,e,n)=>{const{renderBoards:r}=n(389);function o(t,e,n,r){const o=function(t){return"carrier"===t?5:"battleship"===t?4:"cruiser"===t?3:"destroyer"===t?2:"submarine"===t?1:void 0}(t);return{type:t,axis:r,length:o,coords:function(){let t=[];if("x"===r)if(e+o>10)for(let e=10;e>10-o;e--)t.push([e,n]);else for(let r=e;r<e+o;r++)t.push([r,n]);if("y"===r)if(n+o>10)for(let n=10;n>10-o;n--)t.push([e,n]);else for(let r=n;r<n+o;r++)t.push([e,r]);return t}(),hitAt:[],sunk:!1,hit(t){this.hitAt.includes(t)||this.hitAt.push(t),this.isSunk()},isSunk(){this.hitAt.length===this.length&&(this.sunk=!0)}}}function i(){function t(t,e,n){return{id:t,x:e,y:n,hit:!1,hasShip:!1,missed:!1}}function e(t,e,r,i,a){const s=a,c=new o(t,e,r,i);function u(t){let e=[];return t.forEach((t=>{e.push(function(t,e){return!0!==s.grid.find((n=>n.x===t&&n.y===e)).hasShip}(t[0],t[1]))})),e.every((t=>t))}if(!u(c.coords))return!1;u(c.coords)&&(s.ships.push(c),c.coords.forEach((t=>{n(s,t[0],t[1]).hasShip=!0})))}function n(t,e,n){return t.grid.find((t=>t.x===e&&t.y===n))}return{grid:function(){let e=[];for(let n=0;n<10;n++)for(let r=0;r<10;r++){let o=e.length+1;e.push(new t(o,r+1,n+1))}return e}(),ships:[],placeShip2:e,randomize3:function(){const t=this;let r=[],i=[];const a=e=>{let r=[];return e.forEach((e=>{r.push(n(t,e[0],e[1]))})),!!r.every((t=>i.includes(t)))},s=(e,r)=>{const o=e.x,i=e.y;i>0&&r.push(n(t,o,i-1)),o<10&&r.push(n(t,o+1,i)),i<10&&r.push(n(t,o,i+1)),o>0&&r.push(n(t,o-1,i))},c=n=>{const r=i[(s=i.length,Math.round(Math.random()*s))];var s;const u=r.x,l=r.y,d=Math.random()>.5?"x":"y",h=new o(n,u,l,d).coords;console.log(n,u,l,d,t),!1===a(h)?c(n):a(h)&&e(n,u,l,d,t)};["carrier","battleship","cruiser","destroyer","destroyer","submarine","submarine"].forEach((e=>{(t=>{i=[],t.grid.forEach((t=>{t.hasShip&&(r.push(t),s(t,r))})),t.grid.forEach((t=>{r.includes(t)||i.push(t)}))})(t),c(e)}))},recieveAttack:function(t,e){let n=!1;this.ships.forEach((r=>{for(let o=0;o<r.coords.length;o++){const i=r.coords[o];if(i[0]===t&&i[1]===e)return void r.hit(o);n=!0}})),this.grid.forEach((r=>{r.x===t&&r.y===e&&(r.hit=!0,n&&(r.missed=!0))}))},gameoverEval:function(){let t=[];return this.ships.forEach((e=>{t.push(e.sunk)})),t.every((t=>t))}}}const a=(()=>{const t=new i,e=new i;t.randomize3(),e.randomize3(),r(t,e),console.log(t),console.log(e)})();t.exports={Ship:o,Gameboard:i,Player:function(t){return{name:t,isTurn:!1,isAI:!1,play:function t(e){let n=Math.round(9*Math.random())+1,r=Math.round(9*Math.random())+1;e.grid.forEach((o=>{if(o.x===n&&o.y===r){if(o.hit)return void t(e);e.recieveAttack(n,r)}}))}}},run:a}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=n(379),e=n.n(t),r=n(795),o=n.n(r),i=n(569),a=n.n(i),s=n(565),c=n.n(s),u=n(216),l=n.n(u),d=n(589),h=n.n(d),f=n(902),p={};p.styleTagTransform=h(),p.setAttributes=c(),p.insert=a().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=l(),e()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals,n(720)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,