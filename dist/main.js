(()=>{var t={902:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});var r=n(15),i=n.n(r),o=n(645),s=n.n(o)()(i());s.push([t.id,"html, body {\n    margin: 0px;\n}\n#main-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n}\n#winner-screen {\n    display: none;\n    justify-content: center;\n    align-items: center;\n    position: fixed;\n    overflow: hidden;\n    height: 100vh;\n    width: 100%;\n    background-color: rgb(16, 24, 43);\n    color:honeydew;\n}\n.board {\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    height: 40vh;\n    width: 40vh;\n    margin: 5vh;\n    border: 0.5px solid black;\n}\n.cell {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 0.5px solid black;\n    cursor: pointer;\n}\n.has-ship {\n    background-color: grey;\n}\n.missed {\n    background-color: yellow;\n}\n.hit {\n    max-width: 75%;\n    max-height: 75%;\n}","",{version:3,sources:["webpack://./style.css"],names:[],mappings:"AAAA;IACI,WAAW;AACf;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;AACjB;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;IACf,gBAAgB;IAChB,aAAa;IACb,WAAW;IACX,iCAAiC;IACjC,cAAc;AAClB;AACA;IACI,aAAa;IACb,sCAAsC;IACtC,mCAAmC;IACnC,YAAY;IACZ,WAAW;IACX,WAAW;IACX,yBAAyB;AAC7B;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,yBAAyB;IACzB,eAAe;AACnB;AACA;IACI,sBAAsB;AAC1B;AACA;IACI,wBAAwB;AAC5B;AACA;IACI,cAAc;IACd,eAAe;AACnB",sourcesContent:["html, body {\n    margin: 0px;\n}\n#main-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n}\n#winner-screen {\n    display: none;\n    justify-content: center;\n    align-items: center;\n    position: fixed;\n    overflow: hidden;\n    height: 100vh;\n    width: 100%;\n    background-color: rgb(16, 24, 43);\n    color:honeydew;\n}\n.board {\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    height: 40vh;\n    width: 40vh;\n    margin: 5vh;\n    border: 0.5px solid black;\n}\n.cell {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 0.5px solid black;\n    cursor: pointer;\n}\n.has-ship {\n    background-color: grey;\n}\n.missed {\n    background-color: yellow;\n}\n.hit {\n    max-width: 75%;\n    max-height: 75%;\n}"],sourceRoot:""}]);const a=s},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(i[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);r&&i[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,i=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,i,o=[],s=!0,a=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(o.push(r.value),!e||o.length!==e);s=!0);}catch(t){a=!0,i=t}finally{try{s||null==n.return||n.return()}finally{if(a)throw i}}return o}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],s=i[3];if(!s)return o;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),u="/*# ".concat(c," */"),l=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[o].concat(l).concat([u]).join("\n")}return[o].join("\n")}},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},s=[],a=0;a<t.length;a++){var c=t[a],u=r.base?c[0]+r.base:c[0],l=o[u]||0,d="".concat(u," ").concat(l);o[u]=l+1;var h=n(d),f={css:c[1],media:c[2],sourceMap:c[3]};-1!==h?(e[h].references++,e[h].updater(f)):e.push({identifier:d,updater:i(f,r),references:1}),s.push(d)}return s}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var o=r(t=t||[],i=i||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=n(o[s]);e[a].references--}for(var c=r(t,i),u=0;u<o.length;u++){var l=n(o[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r=n.css,i=n.media,o=n.sourceMap;i?t.setAttribute("media",i):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},222:(t,e,n)=>{"use strict";t.exports=n.p+"b20b4a32d3bd7c121c2f.png"},389:(t,e,n)=>{"use strict";n.r(e),n.d(e,{DOM:()=>o});var r=n(720),i=n(222);const o=(()=>{const t=document.getElementById("player-board"),e=document.getElementById("AI-board"),n=[t,e],o=(t,e,n)=>{const r=t.grid[e];r.missed&&n.classList.add("missed"),r.hasShip&&r.hit&&(n.children.length<1&&n.appendChild(s()),n.classList.add("has-ship"))};function s(){const t=new Image;return t.src=i,t.classList.add("hit"),t}function a(t){let e=document.getElementById("winner-screen");e.textContent=`${t.name} Wins!`,e.style.display="flex"}return{startup:()=>{console.log(r.l1),[r.mO,r.l1].forEach(((t,e)=>{t.grid.forEach((t=>{const r=document.createElement("div");r.setAttribute("data-x",t.x),r.setAttribute("data-y",t.y),r.classList.add("cell"),n[e].appendChild(r)}))})),r.mO.grid.forEach(((e,n)=>{e.hasShip&&t.children[n].classList.add("has-ship")})),function(n){for(let i=0;i<e.children.length;i++){const c=e.children[i];c.addEventListener("click",(()=>{r.y1.isTurn&&(n.recieveAttack(c.dataset.x,c.dataset.y),n.gameoverEval()&&a(r.y1),o(r.l1,i,c),r.y1.isTurn=!1,setTimeout((()=>{r.AI.play(r.mO),r.mO.gameoverEval()&&a(r.AI),r.mO.grid.forEach((e=>{const n=t.children[e.id-1];e.missed&&n.classList.add("missed"),e.hasShip&&e.hit&&(n.children.length<1&&n.appendChild(s()),n.classList.add("has-ship"))})),r.y1.isTurn=!0}),200),console.log(r.AI))}))}}(r.l1)},renderAttacks:o}})()},720:(t,e,n)=>{"use strict";n.d(e,{mO:()=>a,l1:()=>c,Mw:()=>d,y1:()=>u,AI:()=>l});var r=n(753),i=n.n(r);const o=n(974),{DOM:s}=n(389),a=new o,c=new o,u=new(i()),l=new(i());function d(){a.randomize(),c.randomize(),s.startup()}l.name="Computer",u.isTurn=!0,u.name="Human"},974:(t,e,n)=>{const r=n(880);t.exports=function(){function t(t,e,n){return{id:t,x:e,y:n,hit:!1,hasShip:!1,missed:!1}}function e(t,e,i,o,s){const a=s,c=new r(t,e,i,o);function u(t){let e=[];return t.forEach((t=>{e.push(function(t,e){return!0!==a.grid.find((n=>n.x===t&&n.y===e)).hasShip}(t[0],t[1]))})),e.every((t=>t))}if(!u(c.coords))return!1;u(c.coords)&&(a.ships.push(c),c.coords.forEach((t=>{n(a,t[0],t[1]).hasShip=!0})))}function n(t,e,n){return t.grid.find((t=>t.x===e&&t.y===n))}return{grid:function(){let e=[];for(let n=0;n<10;n++)for(let r=0;r<10;r++){let i=e.length+1;e.push(new t(i,r+1,n+1))}return e}(),ships:[],placeShip:e,randomize:function(){const t=this;let i=[],o=[];const s=e=>{let r=[];return e.forEach((e=>{r.push(n(t,e[0],e[1]))})),!!r.every((t=>o.includes(t)))},a=(e,r)=>{const i=e.x,o=e.y;o>0&&r.push(n(t,i,o-1)),i<10&&r.push(n(t,i+1,o)),o<10&&r.push(n(t,i,o+1)),i>0&&r.push(n(t,i-1,o))},c=n=>{const i=o[(a=o.length,Math.floor(Math.random()*a))];var a;const u=i.x,l=i.y,d=Math.random()>.5?"x":"y",h=new r(n,u,l,d).coords;!1===s(h)?c(n):s(h)&&e(n,u,l,d,t)};["carrier","battleship","cruiser","destroyer","destroyer","submarine","submarine"].forEach((e=>{(t=>{o=[],t.grid.forEach((t=>{t.hasShip&&(i.push(t),a(t,i))})),t.grid.forEach((t=>{i.includes(t)||o.push(t)}))})(t),c(e)}))},recieveAttack:function(t,e){let r=n(this,parseInt(t),parseInt(e));r.hit=!0,r.hasShip||(r.missed=!0),this.ships.forEach((n=>{for(let r=0;r<n.coords.length;r++){const i=n.coords[r];i[0]==t&&i[1]==e&&n.hit(r)}}))},gameoverEval:function(){return this.ships.every((t=>t.sunk))}}}},753:(t,e,n)=>{const{DOM:r}=n(389);t.exports=function(t){function e(t,e,n){const i=Math.floor(5*Math.random());return function(t,e,n){const i=r(t,e,n-1),o=r(t,e+1,n),s=r(t,e,n+1),a=r(t,e-1,n);return{top:i,right:o,bottom:s,left:a,array:[i,o,s,a]}}(t,e,n).array[i]}function n(t,e,n){return t.ships.find((t=>t.coords.some((t=>t[0]==e&&t[1]==n))))}function r(t,e,n){return t.grid.find((t=>t.x==e&&t.y==n))}return{name:t,isTurn:!1,play:function t(i){const o=Math.round(9*Math.random())+1,s=Math.round(9*Math.random())+1,a=r(i,o,s);if(a.hit)t(i);else if(this.foundShip||i.recieveAttack(a.x,a.y),a.hasShip){this.foundShip=!0,this.foundShipCoords=[a.x,a.y];let t=n(i,a.x,a.y);if(console.log(t),t.hitAt.length<2){let t=e(i,a.x,a.y);for(;void 0===t;)t=e(i,a.x,a.y);i.recieveAttack(t.x,t.y)}if(t.hitAt.length>=2){let e=t.coords.find((t=>!1===r(i,t[0],t[1]).hit));console.log(e),i.recieveAttack(e.x,e.y)}}},findShipInCoords:n}}},880:t=>{t.exports=function(t,e,n,r){const i=function(t){return"carrier"===t?5:"battleship"===t?4:"cruiser"===t?3:"destroyer"===t?2:"submarine"===t?1:void 0}(t);return{type:t,axis:r,length:i,coords:function(){let t=[];if("x"===r)if(e+i>10)for(let e=10;e>10-i;e--)t.push([e,n]);else for(let r=e;r<e+i;r++)t.push([r,n]);if("y"===r)if(n+i>10)for(let n=10;n>10-i;n--)t.push([e,n]);else for(let r=n;r<n+i;r++)t.push([e,r]);return t}(),hitAt:[],sunk:!1,hit(t){this.hitAt.includes(t)||this.hitAt.push(t),this.isSunk()},isSunk(){this.hitAt.length===this.length&&(this.sunk=!0)}}}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{"use strict";var t=n(379),e=n.n(t),r=n(795),i=n.n(r),o=n(569),s=n.n(o),a=n(565),c=n.n(a),u=n(216),l=n.n(u),d=n(589),h=n.n(d),f=n(902),p={};p.styleTagTransform=h(),p.setAttributes=c(),p.insert=s().bind(null,"head"),p.domAPI=i(),p.insertStyleElement=l(),e()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals;var A=n(720);n(389),(0,A.Mw)()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,